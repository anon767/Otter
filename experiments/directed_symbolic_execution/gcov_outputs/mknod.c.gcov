        -:    0:Source:/fs/buzz/kkma/code/wc1/branches/DSE/experiments/directed_symbolic_execution/coreutils-6.10/benchmark/../src/mknod.c
        -:    0:Graph:mknod.gcno
        -:    0:Data:mknod.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:/* mknod -- make special files
        -:    2:   Copyright (C) 90, 91, 1995-2007 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:/* Written by David MacKenzie <djm@ai.mit.edu>  */
        -:   18:
        -:   19:#include <config.h>
        -:   20:#include <stdio.h>
        -:   21:#include <getopt.h>
        -:   22:#include <sys/types.h>
        -:   23:#include <selinux/selinux.h>
        -:   24:
        -:   25:#include "system.h"
        -:   26:#include "error.h"
        -:   27:#include "modechange.h"
        -:   28:#include "quote.h"
        -:   29:#include "xstrtol.h"
        -:   30:
        -:   31:/* The official name of this program (e.g., no `g' prefix).  */
        -:   32:#define PROGRAM_NAME "mknod"
        -:   33:
        -:   34:#define AUTHORS "David MacKenzie"
        -:   35:
        -:   36:/* The name this program was run with. */
        -:   37:char *program_name;
        -:   38:
        -:   39:static struct option const longopts[] =
        -:   40:{
        -:   41:  {GETOPT_SELINUX_CONTEXT_OPTION_DECL},
        -:   42:  {"mode", required_argument, NULL, 'm'},
        -:   43:  {GETOPT_HELP_OPTION_DECL},
        -:   44:  {GETOPT_VERSION_OPTION_DECL},
        -:   45:  {NULL, 0, NULL, 0}
        -:   46:};
        -:   47:
        -:   48:void
        -:   49:usage (int status)
        3:   50:{
        3:   51:  if (status != EXIT_SUCCESS)
    #####:   52:    fprintf (stderr, _("Try `%s --help' for more information.\n"),
        -:   53:	     program_name);
        -:   54:  else
        -:   55:    {
        3:   56:      printf (_("Usage: %s [OPTION]... NAME TYPE [MAJOR MINOR]\n"),
        -:   57:	      program_name);
        3:   58:      fputs (_("\
        -:   59:Create the special file NAME of the given TYPE.\n\
        -:   60:\n\
        -:   61:"), stdout);
        3:   62:      fputs(_("\
        -:   63:  -Z, --context=CTX  set the SELinux security context of NAME to CTX\n\
        -:   64:"), stdout);
        3:   65:      fputs (_("\
        -:   66:Mandatory arguments to long options are mandatory for short options too.\n\
        -:   67:"), stdout);
        3:   68:      fputs (_("\
        -:   69:  -m, --mode=MODE   set file permission bits to MODE, not a=rw - umask\n\
        -:   70:"), stdout);
        3:   71:      fputs (HELP_OPTION_DESCRIPTION, stdout);
        3:   72:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
        3:   73:      fputs (_("\
        -:   74:\n\
        -:   75:Both MAJOR and MINOR must be specified when TYPE is b, c, or u, and they\n\
        -:   76:must be omitted when TYPE is p.  If MAJOR or MINOR begins with 0x or 0X,\n\
        -:   77:it is interpreted as hexadecimal; otherwise, if it begins with 0, as octal;\n\
        -:   78:otherwise, as decimal.  TYPE may be:\n\
        -:   79:"), stdout);
        3:   80:      fputs (_("\
        -:   81:\n\
        -:   82:  b      create a block (buffered) special file\n\
        -:   83:  c, u   create a character (unbuffered) special file\n\
        -:   84:  p      create a FIFO\n\
        -:   85:"), stdout);
        3:   86:      emit_bug_reporting_address ();
        -:   87:    }
        3:   88:  exit (status);
        -:   89:}
        -:   90:
        -:   91:int
        -:   92:main (int argc, char **argv)
       10:   93:{
        -:   94:  mode_t newmode;
       10:   95:  char const *specified_mode = NULL;
        -:   96:  int optc;
        -:   97:  int expected_operands;
        -:   98:  mode_t node_type;
       10:   99:  security_context_t scontext = NULL;
        -:  100:
        -:  101:  initialize_main (&argc, &argv);
       10:  102:  program_name = argv[0];
       10:  103:  setlocale (LC_ALL, "");
        -:  104:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  105:  textdomain (PACKAGE);
        -:  106:
       10:  107:  atexit (close_stdout);
        -:  108:
       21:  109:  while ((optc = getopt_long (argc, argv, "m:Z:", longopts, NULL)) != -1)
        -:  110:    {
        8:  111:      switch (optc)
        -:  112:	{
        -:  113:	case 'm':
        1:  114:	  specified_mode = optarg;
        1:  115:	  break;
        -:  116:	case 'Z':
    #####:  117:	  scontext = optarg;
    #####:  118:	  break;
        3:  119:	case_GETOPT_HELP_CHAR;
        4:  120:	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
        -:  121:	default:
    #####:  122:	  usage (EXIT_FAILURE);
        -:  123:	}
        -:  124:    }
        -:  125:
        3:  126:  newmode = (S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);
        3:  127:  if (specified_mode)
        -:  128:    {
        1:  129:      struct mode_change *change = mode_compile (specified_mode);
        1:  130:      if (!change)
    #####:  131:	error (EXIT_FAILURE, 0, _("invalid mode"));
        1:  132:      newmode = mode_adjust (newmode, false, umask (0), change, NULL);
        1:  133:      free (change);
        1:  134:      if (newmode & ~S_IRWXUGO)
    #####:  135:	error (EXIT_FAILURE, 0,
        -:  136:	       _("mode must specify only file permission bits"));
        -:  137:    }
        -:  138:
        -:  139:  /* If the number of arguments is 0 or 1,
        -:  140:     or (if it's 2 or more and the second one starts with `p'), then there
        -:  141:     must be exactly two operands.  Otherwise, there must be four.  */
        3:  142:  expected_operands = (argc <= optind
        -:  143:		       || (optind + 1 < argc && argv[optind + 1][0] == 'p')
        -:  144:		       ? 2 : 4);
        -:  145:
        3:  146:  if (argc - optind < expected_operands)
        -:  147:    {
    #####:  148:      if (argc <= optind)
    #####:  149:	error (0, 0, _("missing operand"));
        -:  150:      else
    #####:  151:	error (0, 0, _("missing operand after %s"), quote (argv[argc - 1]));
    #####:  152:      if (expected_operands == 4 && argc - optind == 2)
    #####:  153:	fprintf (stderr, "%s\n",
        -:  154:		 _("Special files require major and minor device numbers."));
    #####:  155:      usage (EXIT_FAILURE);
        -:  156:    }
        -:  157:
        3:  158:  if (expected_operands < argc - optind)
        -:  159:    {
    #####:  160:      error (0, 0, _("extra operand %s"),
        -:  161:	     quote (argv[optind + expected_operands]));
    #####:  162:      if (expected_operands == 2 && argc - optind == 4)
    #####:  163:	fprintf (stderr, "%s\n",
        -:  164:		 _("Fifos do not have major and minor device numbers."));
    #####:  165:      usage (EXIT_FAILURE);
        -:  166:    }
        -:  167:
        3:  168:  if (scontext && setfscreatecon (scontext) < 0)
    #####:  169:    error (EXIT_FAILURE, errno,
        -:  170:	   _("failed to set default file creation context to %s"),
        -:  171:	   quote (optarg));
        -:  172:
        -:  173:  /* Only check the first character, to allow mnemonic usage like
        -:  174:     `mknod /dev/rst0 character 18 0'. */
        -:  175:
        3:  176:  switch (argv[optind + 1][0])
        -:  177:    {
        -:  178:    case 'b':			/* `block' or `buffered' */
        -:  179:#ifndef S_IFBLK
        -:  180:      error (EXIT_FAILURE, 0, _("block special files not supported"));
        -:  181:#else
        1:  182:      node_type = S_IFBLK;
        -:  183:#endif
        1:  184:      goto block_or_character;
        -:  185:
        -:  186:    case 'c':			/* `character' */
        -:  187:    case 'u':			/* `unbuffered' */
        -:  188:#ifndef S_IFCHR
        -:  189:      error (EXIT_FAILURE, 0, _("character special files not supported"));
        -:  190:#else
        1:  191:      node_type = S_IFCHR;
        -:  192:#endif
        -:  193:      goto block_or_character;
        -:  194:
        2:  195:    block_or_character:
        -:  196:      {
        2:  197:	char const *s_major = argv[optind + 2];
        2:  198:	char const *s_minor = argv[optind + 3];
        -:  199:	uintmax_t i_major, i_minor;
        -:  200:	dev_t device;
        -:  201:
        2:  202:	if (xstrtoumax (s_major, NULL, 0, &i_major, NULL) != LONGINT_OK
        -:  203:	    || i_major != (major_t) i_major)
    #####:  204:	  error (EXIT_FAILURE, 0,
        -:  205:		 _("invalid major device number %s"), quote (s_major));
        -:  206:
        2:  207:	if (xstrtoumax (s_minor, NULL, 0, &i_minor, NULL) != LONGINT_OK
        -:  208:	    || i_minor != (minor_t) i_minor)
    #####:  209:	  error (EXIT_FAILURE, 0,
        -:  210:		 _("invalid minor device number %s"), quote (s_minor));
        -:  211:
        2:  212:	device = makedev (i_major, i_minor);
        -:  213:#ifdef NODEV
        -:  214:	if (device == NODEV)
        -:  215:	  error (EXIT_FAILURE, 0, _("invalid device %s %s"), s_major, s_minor);
        -:  216:#endif
        -:  217:
        2:  218:	if (mknod (argv[optind], newmode | node_type, device) != 0)
        2:  219:	  error (EXIT_FAILURE, errno, "%s", quote (argv[optind]));
        -:  220:      }
    #####:  221:      break;
        -:  222:
        -:  223:    case 'p':			/* `pipe' */
        1:  224:      if (mkfifo (argv[optind], newmode) != 0)
    #####:  225:	error (EXIT_FAILURE, errno, "%s", quote (argv[optind]));
        1:  226:      break;
        -:  227:
        -:  228:    default:
    #####:  229:      error (0, 0, _("invalid device type %s"), quote (argv[optind + 1]));
    #####:  230:      usage (EXIT_FAILURE);
        -:  231:    }
        -:  232:
        1:  233:  exit (EXIT_SUCCESS);
        -:  234:}
