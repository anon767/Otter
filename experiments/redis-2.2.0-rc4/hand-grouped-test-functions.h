/* Tests grouped together on a single line must be run together to behave correctly */
void LPUSHcomma_RPUSHcomma_LLENGTHcomma_LINDEX_dash_ziplist(void); void DEL_a_list_dash_ziplist(void);
void LPUSHcomma_RPUSHcomma_LLENGTHcomma_LINDEX_dash_regular_list(void); void DEL_a_list_dash_regular_list(void);
void BRPOPLPUSH_inside_a_transaction(void);
void BLPOP_inside_a_transaction(void);
void LPUSHXcomma_RPUSHX_dash_generic(void);
void LPUSHXcomma_RPUSHX_dash_linkedlist(void);
void LINSERT_dash_linkedlist(void);
void LPUSHXcomma_RPUSHX_dash_ziplist(void);
void LINSERT_dash_ziplist(void);
void LPUSHXcomma_RPUSHX_convert_from_ziplist_to_list(void);
void LINSERT_convert_from_ziplist_to_list(void);
void LINDEX_consistency_test_dash_ziplist(void); void LINDEX_random_access_dash_ziplist(void);
void LINDEX_consistency_test_dash_linkedlist(void); void LINDEX_random_access_dash_linkedlist(void);
void LLEN_against_nondashlist_value_error(void); void LINDEX_against_nondashlist_value_error(void); void LPUSH_against_nondashlist_value_error(void); void RPUSH_against_nondashlist_value_error(void);
void LLEN_against_non_existing_key(void);
void LINDEX_against_non_existing_key(void);
void RPOPLPUSH_base_case_dash_linkedlist(void);
void RPOPLPUSH_with_the_same_list_as_src_and_dst_dash_linkedlist(void);
void RPOPLPUSH_with_linkedlist_source_and_existing_target_linkedlist(void);
void RPOPLPUSH_with_linkedlist_source_and_existing_target_ziplist(void);
void RPOPLPUSH_base_case_dash_ziplist(void);
void RPOPLPUSH_with_the_same_list_as_src_and_dst_dash_ziplist(void);
void RPOPLPUSH_with_ziplist_source_and_existing_target_linkedlist(void);
void RPOPLPUSH_with_ziplist_source_and_existing_target_ziplist(void);
void RPOPLPUSH_against_non_existing_key(void);
void RPOPLPUSH_against_non_list_src_key(void);
void RPOPLPUSH_against_non_list_dst_key(void);
void RPOPLPUSH_against_non_existing_src_key(void);
void Basic_LPOPslashRPOP_dash_linkedlist(void);
void Basic_LPOPslashRPOP_dash_ziplist(void);
void LPOPslashRPOP_against_non_list_value(void);
void LRANGE_basics_dash_linkedlist(void);
void LRANGE_inverted_indexes_dash_linkedlist(void);
void LRANGE_out_of_range_indexes_including_the_full_list_dash_linkedlist(void);
void LRANGE_out_of_range_negative_end_index_dash_linkedlist(void);
void LRANGE_basics_dash_ziplist(void);
void LRANGE_inverted_indexes_dash_ziplist(void);
void LRANGE_out_of_range_indexes_including_the_full_list_dash_ziplist(void);
void LRANGE_out_of_range_negative_end_index_dash_ziplist(void);
void LRANGE_against_non_existing_key(void);
void LTRIM_basics_dash_linkedlist(void); void LTRIM_out_of_range_negative_end_index_dash_linkedlist(void);
void LTRIM_basics_dash_ziplist(void); void LTRIM_out_of_range_negative_end_index_dash_ziplist(void);
void LSET_dash_linkedlist(void); void LSET_out_of_range_index_dash_linkedlist(void);
void LSET_dash_ziplist(void); void LSET_out_of_range_index_dash_ziplist(void);
void LSET_against_non_existing_key(void);
void LSET_against_non_list_value(void);
void LREM_remove_all_the_occurrences_dash_linkedlist(void); void LREM_remove_the_first_occurrence_dash_linkedlist(void); void LREM_remove_non_existing_element_dash_linkedlist(void);
void LREM_starting_from_tail_with_negative_count_dash_linkedlist(void); void LREM_starting_from_tail_with_negative_count_lparen2rparen_dash_linkedlist(void);
void LREM_deleting_objects_that_may_be_int_encoded_dash_linkedlist(void);
void LREM_remove_all_the_occurrences_dash_ziplist(void);
void LREM_remove_the_first_occurrence_dash_ziplist(void);
void LREM_remove_non_existing_element_dash_ziplist(void);
void LREM_starting_from_tail_with_negative_count_dash_ziplist(void);
void LREM_starting_from_tail_with_negative_count_lparen2rparen_dash_ziplist(void);
void LREM_deleting_objects_that_may_be_int_encoded_dash_ziplist(void);
void Explicit_regression_for_a_list_bug(void);
