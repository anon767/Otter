This is a rather patched-together way of computing something
approximating minimal covering sets for path coverage, akin to what we
did for line, block, edge, and condition coverage.

Contents:

Makefile - builds guaranteedPathCoverage and uncompressPaths, linking
against CIL, Otter, Bz2, and a uuencoder.

guaranteedPathCoverage.ml - a modified version of
guaranteedCoverage.ml which handles path coverage. This approximates
guaranteed coverage, rather than computing it the way it is computeed
for the other forms of coverage, so this program *only* handles paths.
For more details, see the Comments section below.

camlbz2-0.6.0 - the directory that contains the OCaml bindings for bzip2

uuencode - the directory that holds the uuencoding program

uncompressPaths.ml - uncompress the compressed file format. (For
details, see Comments.)

run{Vsftpd,Ngircd,Grep} - invoke guaranteedPathCoverage on each of the
given program's data files, putting the results in
/fs/skoll/symexe/data/pathCoverage/<progName>/*.deps


==================


Comments:

The data is generated in three steps, where ${PROG} is one of grep, vsftpd, or ngircd:
./run${PROG}
python -u ../aggregateGuaranteedCoverage.py path -1 ../../../data/pathCoverage/${PROG} > ${PROG}.aggregated
python -u ../greedyMinCov.py ${PROG}.aggregated > ${PROG}.minCov

Step 1 iterates through all tests and, for each one, runs
guaranteedPathCoverage. As a shortcut to the full calculation,
guaranteedPathCoverage duplicates the code of Report.printPath to
print out a sample value for each path condition. The reason behind
this is that we didn't want to have to run the full guaranteed
coverage calculation, because we know that each path condition for a
given test leads to a distinct path, so we'd need to run almost up to
the number of variables in the path condition. This would likely be
infeasible in any reasonable amount of time. The calculation performed
here, however, is an approximation because if there is a disjunction
in the path condition, then you don't need to set every single
variable that is constrained. (In such cases, there would also be
several different ways of getting the same path.)

For example, if the path condition is 'x==0 || y!=0', this will report
something like:

	Under the condition
	x=0
	y=1
	these 1 paths are hit
	[the path]

Instead of the more accurate

	Under the condition
	x=0
	these 1 paths are hit
	[the path]
	
	Under the condition
	y=1
	these 1 paths are hit
	[the path]

There may also be the possibility that the same path condition is
concretized to two different sample values in two different tests, but
this potential problem was present before, too. It is mitigated by
restricting the values the configurations options can take based on
the possibleValues files.

Also, the paths are so long that I thought file size was becoming a
problem. So, instead of printing out the path itself (the sequence of
basic blocks), I compress the path using bzip2, uuencode it (in such a
way that it goes on one huge line), and print that out. In case we
want to see what the paths actually are, uncompressPaths will take a
file output by guaranteedPathCoverage and print out the same file but
with the encoded paths entirely unfolded. (bzip2 takes a long time,
and the files can still be quite large---for example, grep's data
causes trouble, and I had to run it on bigmac, a which has much more
memory than the Skoll machines. A better way to do this might be to
compute the hash of the paths. The only problem with this is that we
would have to guard against collisions.)

In both the compressed and uncompressed formats, each path is printed
out on a single line. This is important for step 2, because
aggregateGuaranteedCoverage.py assumes that what follows 'these n
blahs are hit' is set of code entities, listed one per line.

After step 1, we have something that looks just like our old
guaranteed coverage outputs, so we just aggregate them (step 2) and
compute the minimal covering set (step 3) using the same scripts as
before.
