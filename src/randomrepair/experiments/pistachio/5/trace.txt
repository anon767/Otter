Before we know the following:

{msgin.type = RCP_FILE_HEADER; (msgin.payload[1] << sizeof(int)) | msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0}

Comments: msgin.payload[0] and msgin.payload[1] that will compose a long representing the file size. The file size has to be greater than 0. msgin.str is the string part of the message (there's at most a string in any message). len(msgin.str) is the length of the file name). 
Note: I'm writing the facts here for UNSIGNED values only. I recommend you do the same, since you can hardly ever find negative values in protocols.

-------------------
Statement: if(msgin.type == RCP_FILE_HEADER)
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0}
Notes: True branch.
-------------------
Statement: if(msgin.payload[0] > 0)
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0}
Notes: True branch.
-------------------
Statement: msgout.type = RCP_START_FILE_REQ;
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0; msgout.type = RCP_START_FILE_REQ;}
-------------------
Statement: fsize = MAKE_LONG(payload[0], payload[1]);
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0; msgout.type = RCP_START_FILE_REQ; fsize = (payload[1] << sizeof(int)) | payload[0]}
Comments: The MAKE_LONG function composes two integers into a long value. The first integer is the low word and the second is the high word. The actual C expression has a lot of casts, etc., but internally Pistachio works with the int64 types (in OCaml), so the above expression works. MAKE_LONG is a macro. 
-------------------
Statement: blocks = fsize / blocksize;
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0; msgout.type = RCP_START_FILE_REQ; fsize = (payload[1]) << sizeof(int)) | payload[0]; blocks = fsize / blocksize}
-------------------
Statement: msgout.payload[0] = LO_INT(blocks);
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0; msgout.type = RCP_START_FILE_REQ; fsize = (payload[1] << sizeof(int)) | payload[0]; blocks = fsize / blocksize; msgout.payload[0] = (blocks << sizeof(int)) >> sizeof(int)}
-------------------
Statement: msgout.payload[0] = HI_INT(blocks);
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0; msgout.type = RCP_START_FILE_REQ; fsize = (payload[1] << sizeof(int)) | payload[0]; blocks = fsize / blocksize; msgout.payload[0] = (blocks << sizeof(int)) >> sizeof(int); msgout.payload[1] = ((unsigned long)blocks) >> sizeof(int)}
-------------------
Statement: send(sock_in, outbuf, sz);
Facts: {msgin.type = RCP_FILE_HEADER; msgin.payload[0] > 0; len(msgin.str) > 0; blocksize > 0; msgout.type = RCP_START_FILE_REQ; fsize = (payload[1] << sizeof(int)) | payload[0]; blocks = fsize / blocksize; msgout.payload[0] = (blocks << sizeof(int)) >> sizeof(int); msgout.payload[1] = (blocks) >> sizeof(int)}

CHECK: msgout.type = RCP_START_FILE_REQ __AND__ 
	((msgout.payload[1] << sizeof(int)) | msggout.payload[1]) > 0

Comments: I won't include a trace solution for this, but essentially the change is the following: if I apply a conversion to double, then ((double)fsize) / blocksize > 0 (the theorem prover can show this, since both variables are > 0 (from the hypothesis). We have an internal rule for ceil that says that:

ceil(x): if x > [x] then ceil(x) > x, where [x] is the integral part of x

we can conclude that ceil(((double)fsize) / blocksize) > ((double)fsize) / blocksize > 0, then

	((msgout.payload[1] << sizeof(int)) | msggout.payload[1]) > 0
