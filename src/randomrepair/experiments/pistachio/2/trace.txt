Statement: sz = recv(sock_in, inbuf, MAX_MSG_SIZE);
Facts: {$lastsz[sock_in] = wndsize[sock_in]; wndsize[sock_in] = 512; inbuf[3] = RCP_WNDSIZE; inbuf[4..7] < RCP_MAX_WNDSIZE; inbuf[4..7] >= RCP_MIN_WNDSIZE; inbuf[4..7] != $lastsz[sock_in]}
Comments: Before hand, we know the rule variables $lastsz for this socket (sock_in) has been set to the last window size. In this particular run, the last window size was 512. Byte 3 of the message contains the message type (RCP_WNDSIZE). What happends here is that the parties must agree on a window size before transmitting files.  We also know that the window size sent by the other party is within the accepted bounds of RCP (constants in the code portion) - remember we assume that this the other party functions perfectly. Furthermore, we know from the rule hypothesis that at this point we still do not have agreement on window sizes (i.e., the input window size is still not equal the last one we sent ($lastsz[sock_in]).
Notes: Input pattern matched for rule wndnegotiate
-------------------
Statement: rcp_extract(inbuf, sz, &msgin);
Facts: {$lastsz[sock_in] = wndsize[sock_in]; wndsize[sock_in] = 512; inbuf[3] = RCP_WNDSIZE; inbuf[4..7] < RCP_MAX_WNDSIZE; inbuf[4..7] >= RCP_MIN_WNDSIZE, msgin.type = RCP_WNDSIZE, msgin.payload[0] < RCP_MAX_WNDSIZE; msgin.payload[0] >= RCP_MIN_WNDSIZE; inbuf[4..7] != $lastsz[sock_in]; msgin.payload[0] != $lastsz[sock_in]}
Comments: This method extracts the facts from the buffer into a structure. The msgin.type field will reflect whatever is in inbuf[3], then the rest of the message (except the end flags) will be parsed into integer values into msgin.payload. In our case, msgin.payload[0] will be equal to inbuf[4..7], and hence within the RCP window bounds.
-------------------
Statement: if(msgin.type == RCP_WNDSIZE) 
Facts: {$lastsz[sock_in] = wndsize[sock_in]; wndsize[sock_in] = 512; inbuf[3] = RCP_WNDSIZE; inbuf[4..7] < RCP_MAX_WNDSIZE; inbuf[4..7] >= RCP_MIN_WNDSIZE, msgin.type = RCP_WNDSIZE, msgi;.payload[0] < RCP_MAX_WNDSIZE; msgin.payload[0] >= RCP_MIN_WNDSIZE; inbuf[4..7] != $lastsz[sock_in]; msgin.payload[0] != $lastsz[sock_in]}
Comments: We know this holds (for the current hypothesis, hence we will move on the true branch only.
Notes: True branch
-------------------
Statement: if(msgin.payload[0] =! wndsize[sock_in])
Facts: {wndsize[sock_in] = $lastsz[sock_in]; wndsize[sock_in] = 512; inbuf[3] = RCP_WNDSIZE; inbuf[4..7] < RCP_MAX_WNDSIZE; inbuf[4..7] >= RCP_MIN_WNDSIZE, msgin.type = RCP_WNDSIZE, msgin.payload[0] = 0; inbuf[4..7] != $lastsz[sock_in]; }
Comment: in this case, wndsize is 512 and !wndsize[sock_in] is 0, hence msgin.payload[0] becomes 0. We will only take the false branch.
Notes: False branch
-------------------
Statement: send_file_request(sock_in, F);
Facts: {wndsize[sock_in] = $lastsz[sock_in]; wndsize[sock_in] = 512; inbuf[3] = RCP_WNDSIZE; inbuf[4..7] < RCP_MAX_WNDSIZE; inbuf[4..7] >= RCP_MIN_WNDSIZE, msgin.type = RCP_WNDSIZE, msgin.payload[0] = 0; inbuf[4..7] != $lastsz[sock_in]; outbuf[3] = RCP_FILE_REQUEST; outbuf[4..7] = SOT}
Notes: Output pattern matched for rule wndnegotiate
Comments: This function will automatically send a new file request message that initiates the file transfer (either party sends this as a sort of start-of-data marker). The message only contains its type and an SOT (start-of-text code).

CHECK: outbuf[3] = RCP_WNDSIZE __AND__ outbuf[4..7] < RCP_MAX_WNDSIZE __AND__ outbuf[4..7] >= RCP_MIN_WNDSIZE >>> FAILED
