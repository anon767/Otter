#Please refer LICENSE FILE in the home directory for licensing
#information always use full screen mode to view/edit this file in
#emacs

#do not edit
#OPTIONS1 = -DNATIVE_C_ARITH
#OPTIONS2 = -DSMTLIB

#CFLAGS_BASE = -g -ggdb -pg -O0 $(OPTIONS1) $(OPTIONS2)
#CFLAGS_BASE = -ggdb $(OPTIONS1) $(OPTIONS2)

# in order to build a binary that will link against the 10.4u SDK 
# and run on the 10.4 system.
ifeq ($(shell uname -s), Darwin)
MACOSX_MIN = -mmacosx-version-min=10.4
else
MACOSX_MIN = 
endif

CFLAGS_BASE = -O2 $(MACOSX_MIN) $(OPTIONS1) $(OPTIONS2)
LDFLAGS_BASE = -lstdc++ $(MACOSX_MIN)

# PKT: support for universal binaries
# NB: static libraries are poorly supported in Mac OS X. More specifically
#     -static has different semantics than on ELF based systems
# Also, building mac os x universal binaries is a tad tricky
# 1. you cannot use ar on a library after calling ranlib
# 2. -MM dependency tracking does not work

# the architectures to compile for
UNIVERSAL_ARCH = -arch i386 -arch ppc -arch ppc64

# the system root (SDK), needed for cross architecture builds
UNIVERSAL_SDK = /Developer/SDKs/MacOSX10.4u.sdk


# use the darmin test as a proxy for detecting Mac OS X
ifeq ($(shell uname -s), Darwin)
  LDFLAGS = -Wl,-syslibroot,$(UNIVERSAL_SDK) $(UNIVERSAL_ARCH) $(LDFLAGS_BASE)
  CFLAGS = -isysroot $(UNIVERSAL_SDK) $(UNIVERSAL_ARCH) $(CFLAGS_BASE)
else
  LDFLAGS = $(LDFLAGS_BASE)
#  CFLAGS = $(CFLAGS_BASE) -static
  CFLAGS = $(CFLAGS_BASE)
endif

CXXFLAGS = $(CFLAGS) -Wall -DEXT_HASH_MAP
#CXXFLAGS = $(CFLAGS) -Wall 
#LDFLAGS= -lstdc++
#LDFLAGS= -lstdc++ -pg
#LDFLAGS= -lstlport_gcc_stldebug
#LDFLAGS= -L/home/vganesh/STLport/lib -lstlport
# quantify $(CXX) $(CFLAGS) $(LDFLAGS) lexPL.o parsePL.o main.o $(LIBS) -o parser	

LEX = flex
YACC = bison -d -y --debug -v
RANLIB = ranlib
