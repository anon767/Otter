# Makefile implicit rules

OCAMLBUILD ?= ocamlbuild
OCAMLFIND ?= ocamlfind
OCAMLBUILD_BUILDDIR ?= _build
OCAMLBUILD_PRODUCTDIR ?= _product
OCAMLBUILD_DOCDIR ?= doc/api

# helper to find the location of the first existing $(1) in . or $(VPATH)
vpath_for = $(firstword $(wildcard $(foreach foo,$(1),$(addsuffix /$(foo),. $(VPATH)))))

# ocamlbuild helper to build a target $(1), and copy the product into a directory $(2) if given;
# if the $(3) is also given, then it will be copied instead of $(1).
# $(call OCAMLBUILD.build,<ocamlbuild targets>,<target directory>)
define OCAMLBUILD.build
	@echo "ocamlbuild $(1)..." && \
	$(OCAMLBUILD) -build-dir $(OCAMLBUILD_BUILDDIR) -no-links \
		$(OCAMLBUILD_FLAGS) $(VPATH:%=-I %) $(OCAMLBUILD_EXTRATARGETS) $(1) && \
	if [ -n "$(2)" ]; then \
		mkdir -p "$(2)" && \
		if [ -n "$(3)" ]; then target="$(3)"; else target="$(1)"; fi && \
		for foo in $$target; do \
			for v in . $(VPATH); do \
				build="$(OCAMLBUILD_BUILDDIR)/$$v/$$foo"; \
				product="$(2)/`basename $$foo`"; \
				if [ -e "$$build" -a ! "$$build" -ot "$$product" ]; then \
					cp -R "$$build" "$(2)"; \
					break; \
				fi; \
			done; \
		done; \
	fi
endef


# ocamlbuild: build and install into the appropriate directory
.NOTPARALLEL : ocamlbuild//%

ocamlbuild//%.native : $(OCAMLBUILD_BUILDDIR)
	$(call OCAMLBUILD.build,$*.native,$(OCAMLBUILD_PRODUCTDIR))

ocamlbuild//%.byte : $(OCAMLBUILD_BUILDDIR)
	$(call OCAMLBUILD.build,$*.byte,$(OCAMLBUILD_PRODUCTDIR))

ocamlbuild//%.cma ocamlbuild//%.cmi : $(OCAMLBUILD_BUILDDIR)
	$(call OCAMLBUILD.build,$*.cma $*.cmi $(OCAMLBUILD_MORE_CMI),$(OCAMLBUILD_PRODUCTDIR))

ocamlbuild//%.cmxa ocamlbuild//%.a : ocamlbuild//%.cmi $(OCAMLBUILD_BUILDDIR)
	$(call OCAMLBUILD.build,$*.cmxa $*.a $(OCAMLBUILD_MORE_CMI),$(OCAMLBUILD_PRODUCTDIR))

ocamlbuild//%.dot : $(OCAMLBUILD_BUILDDIR)
	$(call OCAMLBUILD.build,$*.dot,$(OCAMLBUILD_DOCDIR))


# %.docdir requires a workaround because:
# - ocamlbuild will not search -I include paths for targets with directory components such as %.docdir/html.stamp;
ocamlbuild//%.docdir : DOCDIR = $(addsuffix .docdir,$(basename $(call vpath_for,$*.mlpack $*.odocl)))
ocamlbuild//%.docdir : $(OCAMLBUILD_BUILDDIR)
	$(call OCAMLBUILD.build,$(DOCDIR)/html.stamp,$(OCAMLBUILD_DOCDIR),$(DOCDIR))


# recompile everything if an external dependency is newer than the build directory
$(OCAMLBUILD_BUILDDIR) : $(OCAMLBUILD_DEPS)
	$(OCAMLBUILD) -clean

clean-ocamlbuild :
	$(OCAMLBUILD) -clean
	$(RM) -r $(OCAMLBUILD_PRODUCTDIR) $(OCAMLBUILD_DOCDIR)


# ounit: build and run
ounit//% : ocamlbuild//%
	$(OCAMLBUILD_PRODUCTDIR)/$* $(OUNIT_FLAGS)


# recursive Makefile build
make//% : %/Makefile
	$(MAKE) -C $* $(MAKEGOALS)

.PRECIOUS : %/Makefile
%/Makefile : %/Makefile.in
	cd $* && ./configure $(CONFIGURE_FLAGS)

# autoconf
Makefile : Makefile.in configure
	./config.status

configure : configure.ac
	autoreconf
