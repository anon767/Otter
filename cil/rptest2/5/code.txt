/*
	RCP 0.5.4. The sender sends a package with a file name and size. The receiver computes the number of blocks (at the currently agreed upon chunk size. The receiver sends that back to the sender as acknowledgement in a start-transmission-request message. A number of blocks lower than the size of the file generally means that the receiver does not have enough space to store the file (the part of code where we check for space has been removed to simplify the code). The rule requests that the number of blocks be higher than 0. For small-size files (lower than the block size, the rule is violated).

	Estimated difficulty for abduction: Medium?

	Bug: integer division. Both the size of the file and the size of a block are integers. The expression should be more complex than size / block_size, it should be ceil(((double)size)/block_size)
			
*/

long fsize, blocks;

if(msgin.type == RCP_FILE_HEADER) {
	if(msgin.payload[0] > 0) {
		msgout.type = RCP_START_FILE_REQ;
		fsize = MAKE_LONG(payload[0], payload[1]);
		blocks = fsize / blocksize;
		msgout.payload[0] = LO_INT(blocks);
		msgout.payload[1] = HI_INT(blocks);
		/* Simplified to remove message packing */
		send(sock_in, msgout);
	} else send_protocol_error(sock_in, ERR_FILESIZE);
}