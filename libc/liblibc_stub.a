/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is true */

typedef long long __int64_t;
typedef __int64_t __darwin_off_t;
typedef __darwin_off_t fpos_t;
struct __sbuf {
   unsigned char *_base ;
   int _size ;
};
struct __sFILEX;
struct __sFILE {
   unsigned char *_p ;
   int _r ;
   int _w ;
   short _flags ;
   short _file ;
   struct __sbuf _bf ;
   int _lbfsize ;
   void *_cookie ;
   int (*_close)(void * ) ;
   int (*_read)(void * , char * , int  ) ;
   fpos_t (*_seek)(void * , fpos_t  , int  ) ;
   int (*_write)(void * , char const   * , int  ) ;
   struct __sbuf _ub ;
   struct __sFILEX *_extra ;
   int _ur ;
   unsigned char _ubuf[3] ;
   unsigned char _nbuf[1] ;
   struct __sbuf _lb ;
   int _blksize ;
   fpos_t _offset ;
};
typedef struct __sFILE FILE;
#pragma pack(4)
#pragma pack()
typedef __builtin_va_list __darwin_va_list;
typedef __darwin_va_list va_list;
typedef unsigned long __darwin_size_t;
typedef __darwin_size_t size_t;
typedef long __darwin_ssize_t;
typedef __darwin_ssize_t ssize_t;
typedef long __darwin_intptr_t;
typedef long __darwin_time_t;
typedef __darwin_intptr_t intptr_t;
typedef unsigned long uintptr_t;
#pragma pack(4)
struct kevent {
   uintptr_t ident ;
   short filter ;
   unsigned short flags ;
   unsigned int fflags ;
   intptr_t data ;
   void *udata ;
};
#pragma pack()
struct timespec;
struct timespec {
   __darwin_time_t tv_sec ;
   long tv_nsec ;
};
typedef unsigned long long uintmax_t;
typedef __darwin_time_t time_t;
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char *tm_zone ;
};
enum flags {
    FL_ZERO = 1,
    FL_MINUS = 2,
    FL_PLUS = 4,
    FL_TICK = 8,
    FL_SPACE = 16,
    FL_HASH = 32,
    FL_SIGNED = 64,
    FL_UPPER = 128
} ;
enum __anonenum_state_3 {
    st_normal = 0,
    st_flags = 1,
    st_width = 2,
    st_prec = 3,
    st_modifiers = 4
} ;
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-fZknZRWP.i","-fno-builtin")
int atoi(char const   *nptr ) ;
uintmax_t strntoumax(char const   *nptr , char **endptr , int base , size_t n ) ;
int atoi(char const   *nptr ) 
{ int __cil_tmp ;

  {
  __cil_tmp = (int )strntoumax(nptr, (char **)((void *)0), 10, ~ 0UL);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-aponqnkN.i","-fno-builtin")
unsigned char const   __ctypes[257] ;
unsigned char const   __ctypes[257]  = 
  {      (unsigned char const   )0,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )144,      (unsigned char const   )144,      (unsigned char const   )144, 
        (unsigned char const   )144,      (unsigned char const   )144,      (unsigned char const   )144,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )48,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )44,      (unsigned char const   )44,      (unsigned char const   )44, 
        (unsigned char const   )44,      (unsigned char const   )44,      (unsigned char const   )44,      (unsigned char const   )44, 
        (unsigned char const   )44,      (unsigned char const   )44,      (unsigned char const   )44,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )41,      (unsigned char const   )41, 
        (unsigned char const   )41,      (unsigned char const   )41,      (unsigned char const   )41,      (unsigned char const   )41, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )42,      (unsigned char const   )42, 
        (unsigned char const   )42,      (unsigned char const   )42,      (unsigned char const   )42,      (unsigned char const   )42, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128,      (unsigned char const   )128, 
        (unsigned char const   )128,      (unsigned char const   )48,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96,      (unsigned char const   )96, 
        (unsigned char const   )96,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )96,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33,      (unsigned char const   )33, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )96,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34,      (unsigned char const   )34, 
        (unsigned char const   )34};
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-bYX4htr4.i","-fno-builtin")
int fgetc(FILE *f ) ;
size_t _fread(void *buf , size_t count , FILE *f ) ;
int fgetc(FILE *f ) 
{ unsigned char ch ;
  int __cil_tmp___0 ;
  int __cil_tmp___1 ;

  {
  __cil_tmp___1 = (int )_fread(& ch, 1, f);
  if (__cil_tmp___1 == 1) {
    __cil_tmp___0 = (int )ch;
  } else {
    __cil_tmp___0 = -1;
  }
  return (__cil_tmp___0);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-4pawGoDv.i","-fno-builtin")
char *fgets(char *s , int n , FILE *f ) ;
extern int getc(FILE * ) ;
char *fgets(char *s , int n , FILE *f ) 
{ int ch ;
  char *p ;
  char *__cil_tmp ;

  {
  p = s;
  while (n > 1) {
    ch = getc(f);
    if (ch == -1) {
      *p = (char )'\000';
      return ((char *)((void *)0));
    }
    __cil_tmp = p;
    p ++;
    *__cil_tmp = (char )ch;
    n --;
    if (ch == 10) {
      break;
    }
  }
  if (n) {
    *p = (char )'\000';
  }
  return (s);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-Db0f39J8.i","-fno-builtin")
int fnmatch(char const   *p , char const   *s , int flags )  __asm__("_fnmatch$UNIX2003")  ;
int fnmatch(char const   *p , char const   *s , int flags )  __asm__("_fnmatch$UNIX2003")  ;
int fnmatch(char const   *p , char const   *s , int flags ) 
{ int __cil_tmp ;
  int __cil_tmp___0 ;
  int __cil_tmp___1 ;
  int __cil_tmp___2 ;
  int __cil_tmp___3 ;
  int __cil_tmp___4 ;
  int not ;
  int match ;
  int __cil_tmp___5 ;
  int __cil_tmp___6 ;
  int __cil_tmp___7 ;
  int __cil_tmp___8 ;

  {
  if (flags & 2) {
    if ((int const   )*s == 47) {
      if ((int const   )*p != 47) {
        __cil_tmp___0 = 1;
      } else {
        __cil_tmp = fnmatch(p + 1, s + 1, flags);
        if (__cil_tmp) {
          __cil_tmp___0 = 1;
        } else {
          __cil_tmp___0 = 0;
        }
      }
      return (__cil_tmp___0);
    }
  }
  if (flags & 4) {
    if ((int const   )*s == 46) {
      if ((int const   )*p != 46) {
        __cil_tmp___2 = 1;
      } else {
        __cil_tmp___1 = fnmatch(p + 1, s + 1, flags);
        if (__cil_tmp___1) {
          __cil_tmp___2 = 1;
        } else {
          __cil_tmp___2 = 0;
        }
      }
      return (__cil_tmp___2);
    }
  }
  flags &= -5;
  if (! (flags & 1)) {
    if ((int const   )*p == 92) {
      p ++;
      if ((int const   )*p != (int const   )*s) {
        __cil_tmp___4 = 1;
      } else {
        __cil_tmp___3 = fnmatch(p + 1, s + 1, flags);
        if (__cil_tmp___3) {
          __cil_tmp___4 = 1;
        } else {
          __cil_tmp___4 = 0;
        }
      }
      return (__cil_tmp___4);
    }
  }
  if ((int const   )*s == 0) {
    while ((int const   )*p == 42) {
      p ++;
    }
    return ((int const   )*p != 0);
  }
  switch ((int )*p) {
  case 91: 
  not = 0;
  p ++;
  if ((int const   )*p == 33) {
    not = 1;
    p ++;
  }
  while (1) {
    if ((int const   )*p != 0) {
      if (! ((int const   )*p != 93)) {
        break;
      }
    } else {
      break;
    }
    match = 0;
    if ((int const   )*(p + 1) == 45) {
      if ((int const   )*s >= (int const   )*p) {
        if ((int const   )*s <= (int const   )*(p + 2)) {
          match = 1;
        }
      }
      p += 3;
    } else {
      match = (int const   )*p == (int const   )*s;
      p ++;
    }
    if (match ^ not) {
      while (1) {
        if ((int const   )*p != 0) {
          if (! ((int const   )*p != 93)) {
            break;
          }
        } else {
          break;
        }
        p ++;
      }
      if ((int const   )*p == 93) {
        __cil_tmp___5 = fnmatch(p + 1, s + 1, flags);
        return (__cil_tmp___5);
      }
    }
  }
  break;
  case 42: 
  __cil_tmp___7 = fnmatch(p, s + 1, flags);
  if (__cil_tmp___7) {
    __cil_tmp___6 = fnmatch(p + 1, s, flags);
    return (__cil_tmp___6);
  }
  return (0);
  case 0: 
  if ((int const   )*s == 0) {
    return (0);
  }
  break;
  default: ;
  if ((int const   )*p == (int const   )*s) {
    __cil_tmp___8 = fnmatch(p + 1, s + 1, flags);
    return (__cil_tmp___8);
  } else {
    if ((int const   )*p == 63) {
      __cil_tmp___8 = fnmatch(p + 1, s + 1, flags);
      return (__cil_tmp___8);
    }
  }
  break;
  }
  return (1);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-X6NeI2Uv.i","-fno-builtin")
FILE *fopen(char const   *file , char const   *mode ) ;
FILE *fopen(char const   *file , char const   *mode ) 
{ 

  {
  return ((FILE *)1);
}
}
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-GjU5C6RE.i","-fno-builtin")
int fprintf(FILE *file , char const   *format  , ...) ;
int vfprintf(FILE *file , char const   *format , va_list ap ) ;
int fprintf(FILE *file , char const   *format  , ...) 
{ va_list ap ;
  int rv ;

  {
  __builtin_va_start(ap, format);
  rv = vfprintf(file, format, ap);
  __builtin_va_end(ap);
  return (rv);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-LXx9pK8v.i","-fno-builtin")
int fputc(int c , FILE *f ) ;
size_t _fwrite(void const   *buf , size_t count , FILE *f ) ;
int fputc(int c , FILE *f ) 
{ unsigned char ch ;
  int __cil_tmp___0 ;
  int __cil_tmp___1 ;

  {
  ch = (unsigned char )c;
  __cil_tmp___1 = (int )_fwrite(& ch, 1, f);
  if (__cil_tmp___1 == 1) {
    __cil_tmp___0 = (int )ch;
  } else {
    __cil_tmp___0 = -1;
  }
  return (__cil_tmp___0);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-HBshPkgr.i","-fno-builtin")
int fputs(char const   *s , FILE *file )  __asm__("_fputs$UNIX2003")  ;
size_t strlen(char const   *s ) ;
int fputs(char const   *s , FILE *file )  __asm__("_fputs$UNIX2003")  ;
int fputs(char const   *s , FILE *file ) 
{ size_t __cil_tmp ;
  int __cil_tmp___0 ;

  {
  __cil_tmp = strlen(s);
  __cil_tmp___0 = (int )_fwrite(s, __cil_tmp, file);
  return (__cil_tmp___0);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-yhGEFY3B.i","-fno-builtin")
extern int *__error(void) ;
extern ssize_t read(int  , void * , size_t  )  __asm__("_read$UNIX2003")  ;
extern int fileno(FILE * ) ;
size_t _fread(void *buf , size_t count , FILE *f ) 
{ size_t bytes ;
  ssize_t rv ;
  char *p ;
  int __cil_tmp ;
  int *__cil_tmp___0 ;
  int *__cil_tmp___1 ;

  {
  bytes = (size_t )0;
  p = (char *)buf;
  while (count) {
    __cil_tmp = fileno(f);
    rv = read(__cil_tmp, (void *)p, count);
    if (rv == -1L) {
      __cil_tmp___1 = __error();
      if (*__cil_tmp___1 == 4) {
        __cil_tmp___0 = __error();
        *__cil_tmp___0 = 0;
        continue;
      } else {
        break;
      }
    } else {
      if (rv == 0L) {
        break;
      }
    }
    p += rv;
    bytes += (size_t )rv;
    count -= (size_t )rv;
  }
  return (bytes);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-6YwNS1qk.i","-fno-builtin")
size_t fread(void *ptr , size_t size , size_t nmemb , FILE *f ) ;
size_t fread(void *ptr , size_t size , size_t nmemb , FILE *f ) 
{ int __cil_tmp ;

  {
  __cil_tmp = (int )_fread(ptr, size * nmemb, f);
  return ((size_t )__cil_tmp / size);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-zx8NM4KT.i","-fno-builtin")
extern ssize_t write(int  , void const   * , size_t  )  __asm__("_write$UNIX2003")  ;
size_t _fwrite(void const   *buf , size_t count , FILE *f ) 
{ size_t bytes ;
  ssize_t rv ;
  char const   *p ;
  int __cil_tmp ;
  int *__cil_tmp___0 ;
  int *__cil_tmp___1 ;

  {
  bytes = (size_t )0;
  p = (char const   *)buf;
  while (count) {
    __cil_tmp = fileno(f);
    rv = write(__cil_tmp, (void const   *)p, count);
    if (rv == -1L) {
      __cil_tmp___1 = __error();
      if (*__cil_tmp___1 == 4) {
        __cil_tmp___0 = __error();
        *__cil_tmp___0 = 0;
        continue;
      } else {
        break;
      }
    } else {
      if (rv == 0L) {
        break;
      }
    }
    p += rv;
    bytes += (size_t )rv;
    count -= (size_t )rv;
  }
  return (bytes);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-n40I8plE.i","-fno-builtin")
size_t fwrite(void const   *ptr , size_t size , size_t nmemb , FILE *f )  __asm__("_fwrite$UNIX2003")  ;
size_t fwrite(void const   *ptr , size_t size , size_t nmemb , FILE *f )  __asm__("_fwrite$UNIX2003")  ;
size_t fwrite(void const   *ptr , size_t size , size_t nmemb , FILE *f ) 
{ int __cil_tmp ;

  {
  __cil_tmp = (int )_fwrite(ptr, size * nmemb, f);
  return ((size_t )__cil_tmp / size);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-Zxfc6FQE.i","-fno-builtin")
__inline static int __ctype_isalnum(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 7));
}
}
int isalnum(int c ) ;
int isalnum(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isalnum(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-TEevqWpG.i","-fno-builtin")
__inline static int __ctype_isalpha(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 3));
}
}
int isalpha(int c ) ;
int isalpha(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isalpha(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-BhlXm6TJ.i","-fno-builtin")
__inline static int __ctype_isascii(int __c ) 
{ 

  {
  return (! (__c & -128));
}
}
int isascii(int c ) ;
int isascii(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isascii(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-QYjG6TZ8.i","-fno-builtin")
__inline static int __ctype_isblank(int __c ) 
{ int __cil_tmp ;

  {
  if (__c == 9) {
    __cil_tmp = 1;
  } else {
    if (__c == 32) {
      __cil_tmp = 1;
    } else {
      __cil_tmp = 0;
    }
  }
  return (__cil_tmp);
}
}
int isblank(int c ) ;
int isblank(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isblank(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-uvKvEzx4.i","-fno-builtin")
__inline static int __ctype_iscntrl(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 128));
}
}
int iscntrl(int c ) ;
int iscntrl(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_iscntrl(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-IkQz2H5v.i","-fno-builtin")
__inline static int __ctype_isdigit(int __c ) 
{ 

  {
  return ((unsigned int )__c - 48U <= 9U);
}
}
int isdigit(int c ) ;
int isdigit(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isdigit(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-xJibVJV3.i","-fno-builtin")
__inline static int __ctype_isgraph(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 71));
}
}
int isgraph(int c ) ;
int isgraph(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isgraph(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-Wyc3lvjg.i","-fno-builtin")
__inline static int __ctype_islower(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 2));
}
}
int islower(int c ) ;
int islower(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_islower(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-iqlwRQ05.i","-fno-builtin")
__inline static int __ctype_isprint(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 32));
}
}
int isprint(int c ) ;
int isprint(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isprint(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-iWEDscUL.i","-fno-builtin")
__inline static int __ctype_ispunct(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 64));
}
}
int ispunct(int c ) ;
int ispunct(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_ispunct(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-714SgNto.i","-fno-builtin")
__inline static int __ctype_isspace(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 16));
}
}
int isspace(int c ) ;
int isspace(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isspace(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-Rb5zdbaJ.i","-fno-builtin")
__inline static int __ctype_isupper(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 1));
}
}
int isupper(int c ) ;
int isupper(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isupper(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-SCt8n2kl.i","-fno-builtin")
__inline static int __ctype_isxdigit(int __c ) 
{ 

  {
  return ((int )((int const   )__ctypes[__c + 1] & 8));
}
}
int isxdigit(int c ) ;
int isxdigit(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_isxdigit(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-wTWKTbtr.i","-fno-builtin")
int kqueue(void) ;
int kevent(int kq , struct kevent  const  *changelist , int nchanges , struct kevent *eventlist ,
           int nevents , struct timespec  const  *timeout ) ;
int kqueue(void) 
{ 

  {
  return (0);
}
}
int kevent(int kq , struct kevent  const  *changelist , int nchanges , struct kevent *eventlist ,
           int nevents , struct timespec  const  *timeout ) 
{ 

  {
  return (0);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-XnFuav4w.i","-fno-builtin")
void *memcpy(void *dst , void const   *src , size_t n ) ;
void *memcpy(void *dst , void const   *src , size_t n ) 
{ char const   *p ;
  char *q ;
  char *__cil_tmp ;
  char const   *__cil_tmp___0 ;
  size_t __cil_tmp___1 ;

  {
  p = (char const   *)src;
  q = (char *)dst;
  while (1) {
    __cil_tmp___1 = n;
    n --;
    if (! __cil_tmp___1) {
      break;
    }
    __cil_tmp = q;
    q ++;
    __cil_tmp___0 = p;
    p ++;
    *__cil_tmp = (char )*__cil_tmp___0;
  }
  return (dst);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-5kV03IUB.i","-fno-builtin")
char memmove(void *dst , void const   *src , size_t n ) ;
char memmove(void *dst , void const   *src , size_t n ) 
{ char const   *p ;
  char *q ;
  char *__cil_tmp ;
  char const   *__cil_tmp___0 ;
  size_t __cil_tmp___1 ;
  size_t __cil_tmp___2 ;

  {
  p = (char const   *)src;
  q = (char *)dst;
  if ((unsigned int )q < (unsigned int )p) {
    while (1) {
      __cil_tmp___1 = n;
      n --;
      if (! __cil_tmp___1) {
        break;
      }
      __cil_tmp = q;
      q ++;
      __cil_tmp___0 = p;
      p ++;
      *__cil_tmp = (char )*__cil_tmp___0;
    }
  } else {
    p += n;
    q += n;
    while (1) {
      __cil_tmp___2 = n;
      n --;
      if (! __cil_tmp___2) {
        break;
      }
      q --;
      p --;
      *q = (char )*p;
    }
  }
  return (char)(dst);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-GjilfQLf.i","-fno-builtin")
char memset(void *dst , int c , size_t n ) ;
char memset(void *dst , int c , size_t n ) 
{ char *q ;
  char *__cil_tmp ;
  size_t __cil_tmp___0 ;

  {
  q = (char *)dst;
  while (1) {
    __cil_tmp___0 = n;
    n --;
    if (! __cil_tmp___0) {
      break;
    }
    __cil_tmp = q;
    q ++;
    *__cil_tmp = (char )c;
  }
  return (char) (dst);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-S5nhcO27.i","-fno-builtin")
extern FILE *__stderrp ;
void perror(char const   *s ) ;
char *strerror(int errnum )  __asm__("_strerror$UNIX2003")  ;
void perror(char const   *s ) 
{ int e ;
  int *__cil_tmp ;
  char *__cil_tmp___0 ;

  {
  __cil_tmp = __error();
  e = *__cil_tmp;
  __cil_tmp___0 = strerror(e);
  fprintf(__stderrp, "%s: %s\n", s, __cil_tmp___0);
  return;
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-ZZO3FsED.i","-fno-builtin")
extern FILE *__stdoutp ;
int printf(char const   *format  , ...) ;
int printf(char const   *format  , ...) 
{ va_list ap ;
  int rv ;

  {
  __builtin_va_start(ap, format);
  rv = vfprintf(__stdoutp, format, ap);
  __builtin_va_end(ap);
  return (rv);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-d0JU5hKo.i","-fno-builtin")
int snprintf(char *buffer , size_t n , char const   *format  , ...) ;
int vsnprintf(char *buffer , size_t n , char const   *format , va_list ap ) ;
int snprintf(char *buffer , size_t n , char const   *format  , ...) 
{ va_list ap ;
  int rv ;

  {
  __builtin_va_start(ap, format);
  rv = vsnprintf(buffer, n, format, ap);
  __builtin_va_end(ap);
  return (rv);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-twTN1pFa.i","-fno-builtin")
int sprintf(char *buffer , char const   *format  , ...) ;
int sprintf(char *buffer , char const   *format  , ...) 
{ va_list ap ;
  int rv ;

  {
  __builtin_va_start(ap, format);
  rv = vsnprintf(buffer, ~ 0UL, format, ap);
  __builtin_va_end(ap);
  return (rv);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-S2YSHqfl.i","-fno-builtin")
char strcasecmp(char const   *s1 , char const   *s2 ) ;
int toupper(int c ) ;
char strcasecmp(char const   *s1 , char const   *s2 ) 
{ unsigned char const   *c1 ;
  unsigned char const   *c2 ;
  unsigned char ch ;
  int d ;
  unsigned char const   *__cil_tmp ;
  int __cil_tmp___0 ;
  unsigned char const   *__cil_tmp___1 ;
  int __cil_tmp___2 ;

  {
  c1 = (unsigned char const   *)s1;
  c2 = (unsigned char const   *)s2;
  d = 0;
  while (1) {
    __cil_tmp = c1;
    c1 ++;
    ch = (unsigned char )*__cil_tmp;
    __cil_tmp___0 = toupper((int )ch);
    __cil_tmp___1 = c2;
    c2 ++;
    __cil_tmp___2 = toupper((int )*__cil_tmp___1);
    d = __cil_tmp___0 - __cil_tmp___2;
    if (d) {
      break;
    } else {
      if (! ch) {
        break;
      }
    }
  }
  return (d);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-lm5nRFH4.i","-fno-builtin")
char *strcat(char *dst , char const   *src ) ;
char *strchr(char const   *s , int c ) ;
char *strcpy(char *dst , char const   *src ) ;
char *strcat(char *dst , char const   *src ) 
{ char *__cil_tmp ;

  {
  __cil_tmp = strchr((char const   *)dst, '\000');
  strcpy(__cil_tmp, src);
  return (dst);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-dzWOr3Mz.i","-fno-builtin")
char *strchr(char const   *s , int c ) 
{ 

  {
  while ((int const   )*s != (int const   )((char )c)) {
    if (! *s) {
      return ((char *)((void *)0));
    }
    s ++;
  }
  return ((char *)s);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-BgnUywq0.i","-fno-builtin")
int strcmp(char const   *s1 , char const   *s2 ) ;
int strcmp(char const   *s1 , char const   *s2 ) 
{ unsigned char const   *c1 ;
  unsigned char const   *c2 ;
  unsigned char ch ;
  int d ;
  unsigned char const   *__cil_tmp ;
  unsigned char const   *__cil_tmp___0 ;

  {
  c1 = (unsigned char const   *)s1;
  c2 = (unsigned char const   *)s2;
  d = 0;
  while (1) {
    __cil_tmp = c1;
    c1 ++;
    ch = (unsigned char )*__cil_tmp;
    __cil_tmp___0 = c2;
    c2 ++;
    d = (int )ch - (int )*__cil_tmp___0;
    if (d) {
      break;
    } else {
      if (! ch) {
        break;
      }
    }
  }
  return (d);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-NkKiYO2U.i","-fno-builtin")
char *strcpy(char *dst , char const   *src ) 
{ char *q ;
  char const   *p ;
  char ch ;
  char *__cil_tmp ;
  char const   *__cil_tmp___0 ;

  {
  q = dst;
  p = src;
  while (1) {
    __cil_tmp = q;
    q ++;
    __cil_tmp___0 = p;
    p ++;
    ch = (char )*__cil_tmp___0;
    *__cil_tmp = ch;
    if (! ch) {
      break;
    }
  }
  return (dst);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-tBDjpu5E.i","-fno-builtin")
size_t strcspn(char const   *s , char const   *reject ) ;
size_t strcspn(char const   *s , char const   *reject ) 
{ char *r ;
  int count ;

  {
  count = 0;
  while ((int const   )*s != 0) {
    r = (char *)reject;
    while ((int )*r != 0) {
      if ((int const   )*s == (int const   )*r) {
        goto FAIL;
      }
      r ++;
    }
    s ++;
    count ++;
  }
  FAIL: 
  return ((unsigned long )count);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-DzUbxCDs.i","-fno-builtin")
static char message[32]  = {      (char )'e',      (char )'r',      (char )'r',      (char )'o', 
        (char )'r',      (char )' ',      (char )'\000'};
char *strerror(int errnum )  __asm__("_strerror$UNIX2003")  ;
char *strerror(int errnum ) 
{ char numbuf[32] ;
  char *p ;
  unsigned int e ;

  {
  e = (unsigned int )errnum;
  p = numbuf + sizeof(numbuf);
  p --;
  *p = (char )'\000';
  while (1) {
    p --;
    *p = (char )(e % 10U + 48U);
    e /= 10U;
    if (! e) {
      break;
    }
  }
  memcpy((void *)(message + 6), (void const   *)p, (unsigned long )((numbuf + sizeof(numbuf)) - p));
  return (message);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-a5MTZtNq.i","-fno-builtin")
size_t strlen(char const   *s ) 
{ char const   *ss ;

  {
  ss = s;
  while (*ss) {
    ss ++;
  }
  return ((unsigned long )(ss - s));
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-vSz5j4XJ.i","-fno-builtin")
int strncmp(char const   *s1 , char const   *s2 , size_t n ) ;
int strncmp(char const   *s1 , char const   *s2 , size_t n ) 
{ unsigned char const   *c1 ;
  unsigned char const   *c2 ;
  unsigned char ch ;
  int d ;
  unsigned char const   *__cil_tmp ;
  unsigned char const   *__cil_tmp___0 ;
  size_t __cil_tmp___1 ;

  {
  c1 = (unsigned char const   *)s1;
  c2 = (unsigned char const   *)s2;
  d = 0;
  while (1) {
    __cil_tmp___1 = n;
    n --;
    if (! __cil_tmp___1) {
      break;
    }
    __cil_tmp = c1;
    c1 ++;
    ch = (unsigned char )*__cil_tmp;
    __cil_tmp___0 = c2;
    c2 ++;
    d = (int )ch - (int )*__cil_tmp___0;
    if (d) {
      break;
    } else {
      if (! ch) {
        break;
      }
    }
  }
  return (d);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-3oA6JrxY.i","-fno-builtin")
__inline static int digitval(int ch ) 
{ 

  {
  if (ch >= 48) {
    if (ch <= 57) {
      return (ch - 48);
    } else {
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
    if (ch >= 65) {
      if (ch <= 90) {
        return ((ch - 65) + 10);
      } else {
        goto _L;
      }
    } else {
      _L: /* CIL Label */ 
      if (ch >= 97) {
        if (ch <= 122) {
          return ((ch - 97) + 10);
        } else {
          return (-1);
        }
      } else {
        return (-1);
      }
    }
  }
}
}
uintmax_t strntoumax(char const   *nptr , char **endptr , int base , size_t n ) 
{ int minus ;
  uintmax_t v ;
  int d ;
  int __cil_tmp ;
  char c ;
  uintmax_t __cil_tmp___0 ;

  {
  minus = 0;
  v = (uintmax_t )0;
  while (1) {
    if (n) {
      __cil_tmp = isspace((int )((unsigned char )*nptr));
      if (! __cil_tmp) {
        break;
      }
    } else {
      break;
    }
    nptr ++;
    n --;
  }
  if (n) {
    c = (char )*nptr;
    if ((int )c == 45) {
      minus = (int )c == 45;
      nptr ++;
      n --;
    } else {
      if ((int )c == 43) {
        minus = (int )c == 45;
        nptr ++;
        n --;
      }
    }
  }
  if (base == 0) {
    if (n >= 2UL) {
      if ((int const   )*(nptr + 0) == 48) {
        if ((int const   )*(nptr + 1) == 120) {
          n -= 2UL;
          nptr += 2;
          base = 16;
        } else {
          if ((int const   )*(nptr + 1) == 88) {
            n -= 2UL;
            nptr += 2;
            base = 16;
          } else {
            goto _L___0;
          }
        }
      } else {
        goto _L___0;
      }
    } else {
      _L___0: /* CIL Label */ 
      if (n >= 1UL) {
        if ((int const   )*(nptr + 0) == 48) {
          n --;
          nptr ++;
          base = 8;
        } else {
          base = 10;
        }
      } else {
        base = 10;
      }
    }
  } else {
    if (base == 16) {
      if (n >= 2UL) {
        if ((int const   )*(nptr + 0) == 48) {
          if ((int const   )*(nptr + 1) == 120) {
            n -= 2UL;
            nptr += 2;
          } else {
            if ((int const   )*(nptr + 1) == 88) {
              n -= 2UL;
              nptr += 2;
            }
          }
        }
      }
    }
  }
  while (1) {
    if (n) {
      d = digitval((int )*nptr);
      if (d >= 0) {
        if (! (d < base)) {
          break;
        }
      } else {
        break;
      }
    } else {
      break;
    }
    v = v * (uintmax_t )base + (uintmax_t )d;
    n --;
    nptr ++;
  }
  if (endptr) {
    *endptr = (char *)nptr;
  }
  if (minus) {
    __cil_tmp___0 = - v;
  } else {
    __cil_tmp___0 = v;
  }
  return (__cil_tmp___0);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-gDpaEnGU.i","-fno-builtin")
struct tm *localtime(time_t const   *timer ) ;
size_t strftime(char *s , size_t maxsize , char const   *format , struct tm  const  *timptr )  __asm__("_strftime$UNIX2003")  ;
time_t time(time_t *timer ) ;
time_t time(time_t *timer ) 
{ 

  {
  return (0L);
}
}
struct tm localtime_stub  ;
struct tm *localtime(time_t const   *timer ) 
{ 

  {
  return (& localtime_stub);
}
}
size_t strftime(char *s , size_t maxsize , char const   *format , struct tm  const  *timptr )  __asm__("_strftime$UNIX2003")  ;
size_t strftime(char *s , size_t maxsize , char const   *format , struct tm  const  *timptr ) 
{ 

  {
  return (maxsize);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-1hbpnewN.i","-fno-builtin")
__inline static int __ctype_tolower(int __c ) 
{ int __cil_tmp___0 ;
  int __cil_tmp___1 ;

  {
  __cil_tmp___1 = __ctype_isupper(__c);
  if (__cil_tmp___1) {
    __cil_tmp___0 = __c | 32;
  } else {
    __cil_tmp___0 = __c;
  }
  return (__cil_tmp___0);
}
}
int tolower(int c ) ;
int tolower(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_tolower(c);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-BQRNezc4.i","-fno-builtin")
__inline static int __ctype_toupper(int __c ) 
{ int __cil_tmp___0 ;
  int __cil_tmp___1 ;

  {
  __cil_tmp___1 = __ctype_islower(__c);
  if (__cil_tmp___1) {
    __cil_tmp___0 = __c & -33;
  } else {
    __cil_tmp___0 = __c;
  }
  return (__cil_tmp___0);
}
}
int toupper(int c ) 
{ int __cil_tmp ;

  {
  __cil_tmp = __ctype_toupper(c);
  return (__cil_tmp);
}
}
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-FIAEqcQ1.i","-fno-builtin")
int vasprintf(char **bufp , char const   *format , va_list ap ) ;
extern char malloc(size_t  ) ;
int vasprintf(char **bufp , char const   *format , va_list ap ) 
{ va_list ap1 ;
  int bytes ;
  char *p ;
  int __cil_tmp ;
  void *__cil_tmp___0 ;
  int __cil_tmp___1 ;

  {
  __builtin_va_copy(ap1, ap);
  __cil_tmp = vsnprintf((char *)((void *)0), 0UL, format, ap1);
  bytes = __cil_tmp + 1;
  __builtin_va_end(ap1);
  __cil_tmp___0 = malloc((unsigned long )bytes);
  p = (char *)__cil_tmp___0;
  *bufp = p;
  if (! p) {
    return (-1);
  }
  __cil_tmp___1 = vsnprintf(p, (unsigned long )bytes, format, ap);
  return (__cil_tmp___1);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-D4eIgk8C.i","-fno-builtin")
int vfprintf(FILE *file , char const   *format , va_list ap ) 
{ int rv ;
  char buffer[32768] ;
  int __cil_tmp ;

  {
  rv = vsnprintf(buffer, 32768UL, format, ap);
  if (rv < 0) {
    return (rv);
  }
  if (rv > 32767) {
    rv = 32767;
  }
  __cil_tmp = (int )_fwrite(buffer, rv, file);
  return (__cil_tmp);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-0rmXwSxS.i","-fno-builtin")
int vprintf(char const   *format , va_list ap ) ;
int vprintf(char const   *format , va_list ap ) 
{ int __cil_tmp ;

  {
  __cil_tmp = vfprintf(__stdoutp, format, ap);
  return (__cil_tmp);
}
}
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-zJPdMp0E.i","-fno-builtin")
static size_t format_int(char *q , size_t n , uintmax_t val , enum flags flags , int base ,
                         int width , int prec ) ;
static char const   lcdigits[17]  = 
  {      (char const   )'0',      (char const   )'1',      (char const   )'2',      (char const   )'3', 
        (char const   )'4',      (char const   )'5',      (char const   )'6',      (char const   )'7', 
        (char const   )'8',      (char const   )'9',      (char const   )'a',      (char const   )'b', 
        (char const   )'c',      (char const   )'d',      (char const   )'e',      (char const   )'f', 
        (char const   )'\000'};
static char const   ucdigits[17]  = 
  {      (char const   )'0',      (char const   )'1',      (char const   )'2',      (char const   )'3', 
        (char const   )'4',      (char const   )'5',      (char const   )'6',      (char const   )'7', 
        (char const   )'8',      (char const   )'9',      (char const   )'A',      (char const   )'B', 
        (char const   )'C',      (char const   )'D',      (char const   )'E',      (char const   )'F', 
        (char const   )'\000'};
static size_t format_int(char *q , size_t n , uintmax_t val , enum flags flags , int base ,
                         int width , int prec ) 
{ char *qq ;
  size_t o ;
  size_t oo ;
  char const   *digits ;
  uintmax_t tmpval ;
  int minus ;
  int ndigits ;
  int nchars ;
  int tickskip ;
  int b4tick ;
  char *__cil_tmp ;
  char *__cil_tmp___0 ;
  char *__cil_tmp___1 ;
  char *__cil_tmp___2 ;
  char *__cil_tmp___3 ;
  char *__cil_tmp___4 ;
  char *__cil_tmp___5 ;
  int __cil_tmp___6 ;
  char *__cil_tmp___7 ;

  {
  o = (size_t )0;
  minus = 0;
  ndigits = 0;
  if ((int )flags & 128) {
    digits = ucdigits;
  } else {
    digits = lcdigits;
  }
  if ((int )flags & 64) {
    if ((long long )val < 0LL) {
      minus = 1;
      val = (unsigned long long )(- ((long long )val));
    }
  }
  tmpval = val;
  while (tmpval) {
    tmpval /= (uintmax_t )base;
    ndigits ++;
  }
  if ((int )flags & 32) {
    if (base == 8) {
      if (prec < ndigits + 1) {
        prec = ndigits + 1;
      }
    }
  }
  if (ndigits < prec) {
    ndigits = prec;
  } else {
    if (val == 0ULL) {
      ndigits = 1;
    }
  }
  if ((int )flags & 8) {
    if (base == 16) {
      tickskip = 4;
    } else {
      tickskip = 3;
    }
  } else {
    tickskip = ndigits;
  }
  ndigits += (ndigits - 1) / tickskip;
  nchars = ndigits;
  if (minus) {
    nchars ++;
  } else {
    if ((int )flags & 20) {
      nchars ++;
    }
  }
  if ((int )flags & 32) {
    if (base == 16) {
      nchars += 2;
    }
  }
  if (! ((int )flags & 3)) {
    if (width > nchars) {
      while (width > nchars) {
        if (o < n) {
          __cil_tmp = q;
          q ++;
          *__cil_tmp = (char )' ';
        }
        o ++;
        width --;
      }
    }
  }
  if (minus) {
    if (o < n) {
      __cil_tmp___0 = q;
      q ++;
      *__cil_tmp___0 = (char )'-';
    }
    o ++;
  } else {
    if ((int )flags & 4) {
      if (o < n) {
        __cil_tmp___1 = q;
        q ++;
        *__cil_tmp___1 = (char )'+';
      }
      o ++;
    } else {
      if ((int )flags & 16) {
        if (o < n) {
          __cil_tmp___2 = q;
          q ++;
          *__cil_tmp___2 = (char )' ';
        }
        o ++;
      }
    }
  }
  if ((int )flags & 32) {
    if (base == 16) {
      if (o < n) {
        __cil_tmp___3 = q;
        q ++;
        *__cil_tmp___3 = (char )'0';
      }
      o ++;
      if (o < n) {
        __cil_tmp___4 = q;
        q ++;
        if ((int )flags & 128) {
          *__cil_tmp___4 = (char )'X';
        } else {
          *__cil_tmp___4 = (char )'x';
        }
      }
      o ++;
    }
  }
  if (((int )flags & 3) == 1) {
    if (width > ndigits) {
      while (width > nchars) {
        if (o < n) {
          __cil_tmp___5 = q;
          q ++;
          *__cil_tmp___5 = (char )'0';
        }
        o ++;
        width --;
      }
    }
  }
  q += ndigits;
  o += (size_t )ndigits;
  qq = q;
  oo = o;
  b4tick = tickskip;
  while (ndigits > 0) {
    __cil_tmp___6 = b4tick;
    b4tick --;
    if (! __cil_tmp___6) {
      qq --;
      oo --;
      ndigits --;
      if (oo < n) {
        *qq = (char )'_';
      }
      b4tick = tickskip - 1;
    }
    qq --;
    oo --;
    ndigits --;
    if (oo < n) {
      *qq = (char )*(digits + val % (unsigned long long )base);
    }
    val /= (uintmax_t )base;
  }
  while (1) {
    if ((int )flags & 2) {
      if (! (width > nchars)) {
        break;
      }
    } else {
      break;
    }
    if (o < n) {
      __cil_tmp___7 = q;
      q ++;
      *__cil_tmp___7 = (char )' ';
    }
    o ++;
    width --;
  }
  return (o);
}
}
int vsnprintf(char *buffer , size_t n , char const   *format , va_list ap ) 
{ char const   *p ;
  char ch ;
  char *q ;
  size_t o ;
  uintmax_t val ;
  int rank ;
  int width ;
  int prec ;
  int base ;
  size_t sz ;
  enum flags flags ;
  enum __anonenum_state_3 state ;
  char const   *sarg ;
  char carg ;
  int slen ;
  char *__cil_tmp ;
  void *__cil_tmp___0 ;
  int __cil_tmp___1 ;
  int __cil_tmp___2 ;
  int __cil_tmp___3 ;
  long __cil_tmp___4 ;
  long long __cil_tmp___5 ;
  unsigned int __cil_tmp___6 ;
  unsigned int __cil_tmp___7 ;
  unsigned int __cil_tmp___8 ;
  unsigned long __cil_tmp___9 ;
  unsigned long long __cil_tmp___10 ;
  size_t __cil_tmp___11 ;
  int __cil_tmp___12 ;
  size_t __cil_tmp___13 ;
  char sch ;
  int i ;
  char pad ;
  int __cil_tmp___14 ;
  char *__cil_tmp___15 ;
  char const   *__cil_tmp___16 ;
  char *__cil_tmp___17 ;
  char *__cil_tmp___18 ;
  signed char *__cil_tmp___19 ;
  short *__cil_tmp___20 ;
  int *__cil_tmp___21 ;
  long *__cil_tmp___22 ;
  long long *__cil_tmp___23 ;
  char *__cil_tmp___24 ;
  char const   *__cil_tmp___25 ;

  {
  p = format;
  q = buffer;
  o = (size_t )0;
  val = (uintmax_t )0;
  rank = 0;
  width = 0;
  prec = -1;
  flags = (enum flags )0;
  state = 0;
  while (1) {
    __cil_tmp___25 = p;
    p ++;
    ch = (char )*__cil_tmp___25;
    if (! ch) {
      break;
    }
    switch ((int )state) {
    case 0: 
    if ((int )ch == 37) {
      state = 1;
      flags = (enum flags )0;
      rank = 0;
      width = 0;
      prec = -1;
    } else {
      if (o < n) {
        __cil_tmp = q;
        q ++;
        *__cil_tmp = ch;
      }
      o ++;
    }
    break;
    case 1: 
    switch ((int )ch) {
    case 45: 
    flags = (enum flags )((int )flags | 2);
    break;
    case 43: 
    flags = (enum flags )((int )flags | 4);
    break;
    case 39: 
    flags = (enum flags )((int )flags | 8);
    break;
    case 32: 
    flags = (enum flags )((int )flags | 16);
    break;
    case 35: 
    flags = (enum flags )((int )flags | 32);
    break;
    case 48: 
    flags = (enum flags )((int )flags | 1);
    break;
    default: 
    state = 2;
    p --;
    break;
    }
    break;
    case 2: 
    if ((int )ch >= 48) {
      if ((int )ch <= 57) {
        width = width * 10 + ((int )ch - 48);
      } else {
        goto _L;
      }
    } else {
      _L: /* CIL Label */ 
      if ((int )ch == 42) {
        width = __builtin_va_arg(ap, int );
        if (width < 0) {
          width = - width;
          flags = (enum flags )((int )flags | 2);
        }
      } else {
        if ((int )ch == 46) {
          prec = 0;
          state = 3;
        } else {
          state = 4;
          p --;
        }
      }
    }
    break;
    case 3: 
    if ((int )ch >= 48) {
      if ((int )ch <= 57) {
        prec = prec * 10 + ((int )ch - 48);
      } else {
        goto _L___0;
      }
    } else {
      _L___0: /* CIL Label */ 
      if ((int )ch == 42) {
        prec = __builtin_va_arg(ap, int );
        if (prec < 0) {
          prec = -1;
        }
      } else {
        state = 4;
        p --;
      }
    }
    break;
    case 4: 
    switch ((int )ch) {
    case 104: 
    rank --;
    break;
    case 108: 
    rank ++;
    break;
    case 106: 
    rank = 2;
    break;
    case 122: 
    rank = 1;
    break;
    case 116: 
    rank = 1;
    break;
    case 76: 
    case 113: 
    rank += 2;
    break;
    default: 
    state = 0;
    if (rank < -2) {
      rank = -2;
    } else {
      if (rank > 2) {
        rank = 2;
      }
    }
    switch ((int )ch) {
    case 80: 
    flags = (enum flags )((int )flags | 128);
    case 112: 
    base = 16;
    prec = (int )((8UL * sizeof(void *) + 3UL) / 4UL);
    flags = (enum flags )((int )flags | 32);
    __cil_tmp___0 = __builtin_va_arg(ap, void *);
    val = (unsigned long long )((unsigned long )__cil_tmp___0);
    goto is_integer;
    case 100: 
    case 105: 
    base = 10;
    flags = (enum flags )((int )flags | 64);
    switch (rank) {
    case -2: 
    __cil_tmp___1 = __builtin_va_arg(ap, int );
    val = (unsigned long long )((long long )((signed char )__cil_tmp___1));
    break;
    case -1: 
    __cil_tmp___2 = __builtin_va_arg(ap, int );
    val = (unsigned long long )((long long )((short )__cil_tmp___2));
    break;
    case 0: 
    __cil_tmp___3 = __builtin_va_arg(ap, int );
    val = (unsigned long long )((long long )__cil_tmp___3);
    break;
    case 1: 
    __cil_tmp___4 = __builtin_va_arg(ap, long );
    val = (unsigned long long )((long long )__cil_tmp___4);
    break;
    case 2: 
    __cil_tmp___5 = __builtin_va_arg(ap, long long );
    val = (unsigned long long )__cil_tmp___5;
    break;
    }
    goto is_integer;
    case 111: 
    base = 8;
    goto is_unsigned;
    case 117: 
    base = 10;
    goto is_unsigned;
    case 88: 
    flags = (enum flags )((int )flags | 128);
    case 120: 
    base = 16;
    goto is_unsigned;
    is_unsigned: 
    switch (rank) {
    case -2: 
    __cil_tmp___6 = __builtin_va_arg(ap, unsigned int );
    val = (unsigned long long )((unsigned char )__cil_tmp___6);
    break;
    case -1: 
    __cil_tmp___7 = __builtin_va_arg(ap, unsigned int );
    val = (unsigned long long )((unsigned short )__cil_tmp___7);
    break;
    case 0: 
    __cil_tmp___8 = __builtin_va_arg(ap, unsigned int );
    val = (unsigned long long )__cil_tmp___8;
    break;
    case 1: 
    __cil_tmp___9 = __builtin_va_arg(ap, unsigned long );
    val = (unsigned long long )__cil_tmp___9;
    break;
    case 2: 
    __cil_tmp___10 = __builtin_va_arg(ap, unsigned long long );
    val = __cil_tmp___10;
    break;
    }
    is_integer: 
    if (o < n) {
      __cil_tmp___11 = n - o;
    } else {
      __cil_tmp___11 = 0UL;
    }
    sz = format_int(q, __cil_tmp___11, val, flags, base, width, prec);
    q += sz;
    o += sz;
    break;
    case 99: 
    __cil_tmp___12 = __builtin_va_arg(ap, int );
    carg = (char )__cil_tmp___12;
    sarg = (char const   *)(& carg);
    slen = 1;
    goto is_string;
    case 115: 
    sarg = __builtin_va_arg(ap, char const   *);
    if (sarg) {
      sarg = sarg;
    } else {
      sarg = "(null)";
    }
    __cil_tmp___13 = strlen(sarg);
    slen = (int )__cil_tmp___13;
    goto is_string;
    is_string: 
    if (prec != -1) {
      if (slen > prec) {
        slen = prec;
      }
    }
    if (width > slen) {
      if (! ((int )flags & 2)) {
        if ((int )flags & 1) {
          __cil_tmp___14 = '0';
        } else {
          __cil_tmp___14 = ' ';
        }
        pad = (char )__cil_tmp___14;
        while (width > slen) {
          if (o < n) {
            __cil_tmp___15 = q;
            q ++;
            *__cil_tmp___15 = pad;
          }
          o ++;
          width --;
        }
      }
    }
    i = slen;
    while (i) {
      __cil_tmp___16 = sarg;
      sarg ++;
      sch = (char )*__cil_tmp___16;
      if (o < n) {
        __cil_tmp___17 = q;
        q ++;
        *__cil_tmp___17 = sch;
      }
      o ++;
      i --;
    }
    if (width > slen) {
      if ((int )flags & 2) {
        while (width > slen) {
          if (o < n) {
            __cil_tmp___18 = q;
            q ++;
            *__cil_tmp___18 = (char )' ';
          }
          o ++;
          width --;
        }
      }
    }
    break;
    case 110: 
    switch (rank) {
    case -2: 
    __cil_tmp___19 = __builtin_va_arg(ap, signed char *);
    *__cil_tmp___19 = (signed char )o;
    break;
    case -1: 
    __cil_tmp___20 = __builtin_va_arg(ap, short *);
    *__cil_tmp___20 = (short )o;
    break;
    case 0: 
    __cil_tmp___21 = __builtin_va_arg(ap, int *);
    *__cil_tmp___21 = (int )o;
    break;
    case 1: 
    __cil_tmp___22 = __builtin_va_arg(ap, long *);
    *__cil_tmp___22 = (long )o;
    break;
    case 2: 
    __cil_tmp___23 = __builtin_va_arg(ap, long long *);
    *__cil_tmp___23 = (long long )o;
    break;
    }
    break;
    default: ;
    if (o < n) {
      __cil_tmp___24 = q;
      q ++;
      *__cil_tmp___24 = ch;
    }
    o ++;
    break;
    }
    }
    }
  }
  if (o < n) {
    *q = (char )'\000';
  } else {
    if (n > 0UL) {
      *(buffer + (n - 1UL)) = (char )'\000';
    }
  }
  return ((int )o);
}
}
#pragma merger(0,"/var/folders/4u/4unNC1vxGsycmylQ4BTTVk+++TI/-Tmp-/cil-1P5zBs9D.i","-fno-builtin")
int vsprintf(char *buffer , char const   *format , va_list ap ) ;
int vsprintf(char *buffer , char const   *format , va_list ap ) 
{ int __cil_tmp ;

  {
  __cil_tmp = vsnprintf(buffer, ~ 0UL, format, ap);
  return (__cil_tmp);
}
}
